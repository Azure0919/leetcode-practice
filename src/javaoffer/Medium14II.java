package javaoffer;

import org.junit.Test;

/**
 * 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），
 * 每段绳子的长度记为 k[0],k[1]...k[m] 。请问 k[0]*k[1]*...*k[m] 可能的最大乘积是多少？
 * 例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
 *
 * 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
 *
 * 示例 1：
 * 输入: 2
 * 输出: 1
 * 解释: 2 = 1 + 1, 1 × 1 = 1
 * 示例 2:
 * 输入: 10
 * 输出: 36
 * 解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
 *
 *
 * 提示：
 *
 * 2 <= n <= 1000
 * 思路：和上一题唯一区别是绳子会很长，需要考虑大数越界。
 * 推论一： 合理的切分方案可以带来更大的乘积。
 * 推论二： 若切分方案合理，绳子段切分的越多，乘积越大。
 * 推论三： 为使乘积最大，只有长度为 2 和 3 的绳子不应再切分，且 3 比 2 更优
 *
 * 贪心规则：
 * 最高优先级： 3 。把绳子尽可能切为多个长度为 33 的片段，留下的最后一段绳子的长度可能为 0,1,2 三种情况。
 * 次高优先级： 2 。若最后一段绳子长度为 2，则保留，不再拆为 1+1 。
 * 最低优先级： 1； 若最后一段绳子长度为 1；则应把最后的 3 + 1 替换为 2 + 2，因为 2×2 > 3×1。
 *
 */
public class Medium14II {

	public int cuttingRope(int n) {
		if (n <= 3) return n - 1;
		int mod = 1000000007;
		long res = 1;
		while (n > 4) {
			res *= 3;
			res %= mod;
			n -= 3;//尽量都按照3分割
		}
		//最后只会剩下3、2、1
		return (int) (res * n % mod);
	}

	@Test
	public void test1() {
		System.out.println(cuttingRope(10));
	}

}
